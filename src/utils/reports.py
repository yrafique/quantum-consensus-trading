"""
trading_system.reports
=====================

This module provides functions to generate detailed reports for a
single stock ticker, including signal evaluation, LLM recommendation,
position sizing, and plotting.  It allows you to programmatically
produce the same analysis shown in the Streamlit UI without a web
interface.

Functions
---------
generate_report(ticker, start_date=None, end_date=None, capital=100_000)
    Evaluate signals and compute an optional LLM recommendation and
    position size for the specified ticker.

plot_report(report, save_path=None)
    Given a report produced by ``generate_report``, plot the price,
    EMA, VWAP, RSI and volume charts using Matplotlib.  Optionally
    save the plot to disk.
"""

from __future__ import annotations

import logging
from typing import Optional, Dict, Any

import matplotlib.pyplot as plt

from . import (
    data_ingestion,
    signals,
    llm_reasoner,
    position_sizer,
)


def generate_report(
    ticker: str,
    start_date: Optional[str] = None,
    end_date: Optional[str] = None,
    capital: float = 100_000.0,
) -> Dict[str, Any]:
    """Generate a detailed report for a single ticker.

    This function evaluates the configured signals for ``ticker``,
    fetches historical data, obtains an LLM recommendation (if
    applicable), computes a position size using the Kelly criterion,
    and packages all information into a dictionary.  It does not
    perform any plotting; use ``plot_report`` for visualisation.

    Parameters
    ----------
    ticker : str
        Symbol of the stock to analyse.
    start_date, end_date : str or None
        Optional start and end dates (YYYY-MM-DD) for data fetching.
    capital : float, optional
        Account capital used to compute position size.

    Returns
    -------
    report : dict
        A dictionary containing the following keys:

        - ``ticker``: the stock symbol.
        - ``passes``: whether the signal conditions are met.
        - ``signal_details``: a dict of indicator values.
        - ``data``: a pandas DataFrame with date, close, ema21,
          vwap, rsi and volume columns.
        - ``recommendation``: the LLM or heuristic recommendation
          dict (or None if no recommendation).
        - ``position_fraction``: scaled Kelly fraction (or None).
        - ``position_size``: dollar size based on ``capital`` and
          fraction (or None).
    """
    # Evaluate signals
    sig_results = signals.generate_signals([ticker], start_date=start_date, end_date=end_date)
    if not sig_results:
        raise ValueError(f"No signal results for ticker {ticker}")
    sig = sig_results[0]
    # Fetch data
    df = data_ingestion.fetch_daily_data(ticker, start_date=start_date, end_date=end_date)
    # Prepare report
    report: Dict[str, Any] = {
        "ticker": ticker,
        "passes": sig.passes,
        "signal_details": sig.details,
        "data": df,
        "recommendation": None,
        "position_fraction": None,
        "position_size": None,
    }
    # Only compute recommendation if signals pass
    if sig.passes:
        # Build context
        if df.empty:
            logging.warning(f"No data for {ticker}; skipping recommendation.")
        else:
            context = {
                "close": float(df["close"].iloc[-1]),
                "rsi": float(df["rsi"].iloc[-1]),
                "ema21": float(df["ema21"].iloc[-1]),
                "vwap": float(df["vwap"].iloc[-1]),
                "volume": float(df["volume"].iloc[-1]),
                "short_float": sig.details.get("short_float"),
                "days_to_cover": sig.details.get("days_to_cover"),
                "bullish_engulfing": sig.details.get("bullish_engulfing"),
                "volume_spike": sig.details.get("volume_spike"),
                "short_squeeze": sig.details.get("short_squeeze"),
            }
            rec = llm_reasoner.generate_recommendation(ticker, context)
            report["recommendation"] = rec
            # Compute position sizing if recommendation is a buy
            if rec and rec.get("action") == "Buy":
                entry = rec.get("entry", context["close"])
                stop = rec.get("stop", entry * 0.98)
                target = rec.get("target", entry * 1.05)
                conf = rec.get("confidence", 0.9)
                risk = abs(entry - stop)
                reward = abs(target - entry)
                rr = reward / risk if risk > 0 else 1.0
                frac = position_sizer.compute_position_fraction(conf, rr)
                report["position_fraction"] = frac
                report["position_size"] = capital * frac
    return report


def plot_report(report: Dict[str, Any], save_path: Optional[str] = None) -> None:
    """Plot indicators and volume for a report.

    Given a report generated by ``generate_report``, produce a
    multiâ€‘panel plot with price, EMA and VWAP; RSI; and volume vs
    average volume.  The plot is displayed interactively by default.
    If ``save_path`` is provided, the figure is saved to that
    location in PNG format.

    Parameters
    ----------
    report : dict
        A report dictionary returned by ``generate_report``.
    save_path : str or None, optional
        Path to save the plot image.  If None, the plot is not
        saved.
    """
    df = report.get("data")
    if df is None or df.empty:
        logging.warning("Report contains no data to plot.")
        return
    # Compute 50-day average volume
    df = df.copy()
    df["vol_avg50"] = df["volume"].rolling(window=50).mean()
    # Create subplots
    fig, axs = plt.subplots(3, 1, figsize=(10, 8), sharex=True)
    # Price and indicators
    axs[0].plot(df["date"], df["close"], label="Close", color="blue")
    if "ema21" in df:
        axs[0].plot(df["date"], df["ema21"], label="EMA(21)", color="orange")
    if "vwap" in df:
        axs[0].plot(df["date"], df["vwap"], label="VWAP", color="green")
    axs[0].set_ylabel("Price")
    axs[0].legend()
    axs[0].set_title(f"{report['ticker']} Price & Indicators")
    # RSI
    if "rsi" in df:
        axs[1].plot(df["date"], df["rsi"], label="RSI", color="purple")
        axs[1].axhline(70, color="red", linestyle="--")
        axs[1].axhline(30, color="green", linestyle="--")
        axs[1].set_ylabel("RSI")
        axs[1].legend()
    # Volume
    axs[2].bar(df["date"], df["volume"], label="Volume", color="grey")
    if "vol_avg50" in df:
        axs[2].plot(df["date"], df["vol_avg50"], label="50-day Avg Volume", color="black")
    axs[2].set_ylabel("Volume")
    axs[2].legend()
    axs[2].set_xlabel("Date")
    plt.tight_layout()
    if save_path:
        plt.savefig(save_path, dpi=300)
        logging.info(f"Saved report chart to {save_path}")
    plt.show()


__all__ = ["generate_report", "plot_report"]